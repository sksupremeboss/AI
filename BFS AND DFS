#include<iostream>
#include<map>
#include<list>
#include<queue>

using namespace std;

class Google
{
    public:
    map<int,list<int>>adjList;
    map<int,bool>visited;
    queue<int>q;
   
    void addEdge(int src,int dest)
    {
        adjList[src].push_back(dest);
        adjList[dest].push_back(src);
    }
   
    void DFS(int node)
    {
        visited[node]=true;
        cout<<node<<" ";
        for(int i:adjList[node])
        {
            if(!visited[i])
            {
                DFS(i);
            }
        }
    }
   
    void BFS()
    {
        if(q.empty()) return;
        int node=q.front();
        q.pop();
        cout<<node<<" ";
        for(int i:adjList[node])
        {
            if(!visited[i])
            {
                visited[i]=true;
                q.push(i);
            }
        }
        BFS();
    }
};


int main()
{
    Google g;
    int edges;
    cout<<"Enter Edges:";
    cin>>edges;
    for(int i=0;i<edges;i++){
    int src,dest;
    cin>>src>>dest;
    g.addEdge(src,dest);
    }
   
    int a;
    cout<<"Enter 0 for DFS and Any Number For BFS:";
    cin>>a;
   
    if(!a)
    {
        cout<<"DFS of given graph is:";
        g.DFS(0);
    }
    else
    {
        cout<<"BFS of given graph is:";
        g.q.push(0);
        g.visited[0]=true;
        g.BFS();
    }
   
}
